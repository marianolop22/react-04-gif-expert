{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","style","margin","key","GifExpertApp","categories","setCategories","index","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAApBC,EAAmB,EAAnBA,YAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OACI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,kBAEKJ,EAAWK,OAAOC,OAAS,IAIlCR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAe,OAMX,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAgBE,EAAEQ,OAAOF,Y,uBCRpBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GACpB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAgBZM,GAhBY,4CAAH,sDCiBLO,EAdK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KC0BDO,EA9BC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDJ,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAX,GACHS,EAAU,CACNf,KAAMM,EACNO,SAAS,SAItB,CAACpB,IAIGqB,EDRyBI,CAAczB,GAAjCa,EAZe,EAYpBN,KAAaa,EAZO,EAYPA,QAErB,OACI,oCACI,wBAAIJ,UAAU,oCAAoCU,MAAO,CAACC,OAAQ,SAAW3B,GAC5EoB,GAAW,0CACZ,yBAAKJ,UAAU,aAEHH,EAAOJ,KAAM,SAACC,GAAD,OAAS,kBAAC,EAAD,eAClBkB,IAAKlB,EAAIC,IACLD,UEOjBmB,EA3BM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,cAFvB,mBAEhB4C,EAFgB,KAEJC,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAa9C,YAAa8C,IAC1B,6BAEA,4BAEQD,EAAWrB,KAAK,SAACT,EAAUgC,GAAX,OACZ,kBAAC,EAAD,CACIJ,IAAK5B,EACLA,SAAUA,U,MCftCiC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.faef0ca6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategory } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue ( e.target.value );\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (  !inputValue.trim().length > 0 ) {\n            return;\n        }\n\n        setCategory ( cats => [inputValue,...cats] );\n        setInputValue ('');\n\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n\n\n\n","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=2Nymb2o8NXsHfauqVH0pthgcF5gZsyJJ`;\n    \n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n    // console.log(gifs);\n    // setImages (gifs);\n    return gifs;\n\n};","import React from 'react'\n// import PropTypes from 'prop-types'\n\nconst GifGridItem = ( {id, title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\n/* GifGridItem.propTypes = {\n\n}\n */\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n/* \n    const [images, setImages] = useState([]);\n\n    useEffect( ()=> {\n        getGifs(category)\n            .then( images => {\n                setImages(images);\n            })\n    }, [category]); //al estar vacío, no se vuelve a llamar la funcion, al poner algo, esto se ejecuta cada vez que se modifica\n */\n\n    const { data:images, loading} = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\" style={{margin: 10+'px'}}>{category}</h3>\n            {loading && <p>Loading....</p>}\n            <div className=\"card-grid\">\n                    {\n                        images.map ( (img) => <GifGridItem \n                            key={img.id} \n                            {...img} \n                        /> )\n                    }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( ()=> {\n\n        getGifs( category )\n            .then( images => {\n                setState ({\n                    data: images,\n                    loading: false\n                });\n            })\n\n    }, [category]); //al estar vacío, no se vuelve a llamar la funcion, al poner algo, esto se ejecuta cada vez que se modifica\n\n\n\n    return state;\n\n};","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n// import PropTypes from 'prop-types'\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategory={setCategories}/>\n            <hr/>\n            {/* <button onClick={ handleAdd } >Agregar</button> */}\n            <ol>\n                {\n                    categories.map( (category, index) => \n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    );\n};\n\nGifExpertApp.propTypes = {\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}